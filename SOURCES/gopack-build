#!/usr/bin/env bash

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

APP="GoPack Build"
VER="1.2.6"
DESC="Simple tool for building binaries from sources archive"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[0;${BOLD};49m"
# shellcheck disable=SC2034
CL_UNLN="\e[0;${UNLN};49m"
# shellcheck disable=SC2034
CL_RED="\e[0;${RED};49m"
# shellcheck disable=SC2034
CL_GREEN="\e[0;${GREEN};49m"
# shellcheck disable=SC2034
CL_YELLOW="\e[0;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BLUE="\e[0;${BLUE};49m"
# shellcheck disable=SC2034
CL_MAG="\e[0;${MAG};49m"
# shellcheck disable=SC2034
CL_CYAN="\e[0;${CYAN};49m"
# shellcheck disable=SC2034
CL_GREY="\e[0;${GREY};49m"
# shellcheck disable=SC2034
CL_DARK="\e[0;${DARK};49m"
# shellcheck disable=SC2034
CL_BL_RED="\e[1;${RED};49m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[1;${GREEN};49m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[1;${YELLOW};49m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[1;${BLUE};49m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[1;${MAG};49m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[1;${CYAN};49m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[1;${GREY};49m"

################################################################################

SUPPORTED_OPTS="tmp output !no_color !version !help"
SHORT_OPTS="T:tmp o:output nc:!no_color v:!version h:!help"

################################################################################

TMP_TEMPLATE="gopack-build-XXXXXXXX"

SUPPORTED_ARCH_TYPES="tbz2 tar.bz2 tgz tar.gz tbz tar.bz tar.xz txz"

################################################################################

# Path to temporary dir (String)
tmp="/tmp"

# -
# Temporary directory for sources
tmp_dir=""

################################################################################

main() {
  if [[ ! -t 1 || -n "$no_color" || -n "$NO_COLOR" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit 0
  fi

  prepare
  process "$@"
}

# Check properties and arguments
#
# Code: No
# Echo: No
prepare() {
  if [[ -z "$tmp" ]] ; then
    error "Path to temporary directory can't be empty"
    exit 1
  fi

  if [[ ! -d "$tmp" ]] ; then
    error "Temporary directory ${CL_BL_RED}${tmp}${CL_RED} doesn't exist"
    exit 1
  fi

  if [[ ! -w "$tmp" || ! -r "$tmp" || ! -x "$tmp" ]] ; then
    error "Temporary directory ${CL_BL_RED}${tmp}${CL_RED} must be readable, writable and executable"
    exit 1
  fi

  if [[ -n "$output" ]] ; then
    if [[ ! -d "$output" ]] ; then
      error "Output directory ${CL_BL_RED}${output}${CL_RED} doesn't exist"
      exit 1
    fi

    if [[ ! -w "$output" || ! -x "$output" ]] ; then
      error "Output directory ${CL_BL_RED}${output}${CL_RED} must be writable and executable"
      exit 1
    fi
  fi

  if ! isAppInstalled "go" ; then
    error "This utility require go. Install it first."
    exit 1
  fi

  if ! isAppInstalled "curl" ; then
    error "This utility require curl. Install it first."
    exit 1
  fi
}

# Start source processing
#
# 1: Source file (String)
#
# Code: No
# Echo: No
process() {
  local src="$1"
  local src_name

  src_name=$(basename "$src")

  makeTempDir

  if isURL "$src" ; then
    downloadSources "$src"
  else
    if [[ ! -e "$src" ]] ; then
      error "File $src doesn't exist"
      cleanAndExit 1
    fi
    
    cp "$src" "$tmp_dir/"
  fi

  unpackSources "$src_name"
  buildBinaries "$src_name"

  cleanAndExit
}

# Download remote source
#
# 1: URL (String)
#
# Code: No
# Echo: No
downloadSources() {
  local url="$1"

  if ! isAccessibleURL "$url" ; then
    error "Can't download sources - server return error code"
    cleanAndExit 1
  fi

  local file_name
  file_name=$(basename "$url")

  show "Downloading sources…"

  if ! curl -L --max-redirs 10 --progress-bar "$url" -o "$tmp_dir/$file_name" ; then
    cleanAndExit 1
  fi
}

# Build all binaries
#
# 1: Source name (String)
#
# Code: No
# Echo: No
buildBinaries() {
  local src_name="$1"
  local binaries binary binary_name pkg_name
  local build_log="$tmp_dir/build.log"

  pkg_name=$(getArchName "$src_name")

  setupGoEnv "$tmp_dir"

  mv "$tmp_dir/$pkg_name"/* "$tmp_dir/src/"
  
  binaries=$(findBinaries "$tmp_dir")

  if [[ -z "$binaries" ]] ; then
    show ""
    error "Can't find any binaries for build"
    cleanAndExit 1
  fi

  if [[ -z "$output" ]] ; then
    output="."
  fi

  show "Building binaries…"

  for binary in $binaries ; do
    binary_name=$(basename "$binary")
    binary_name="${binary_name//.go/}"

    showm " ${CL_DARK}•${CL_NORM} $binary_name "

    if ! go build -o "$output/$binary_name" "$binary" &> "$build_log" ; then
      show "✖ \n" $RED
      cat "$build_log"
      show ""
      error "Can't build binary"
      cleanAndExit 1
    fi

    show "✔ " $GREEN
  done

  show ""
  
  if [[ "$output" == "." ]] ; then
    show "All binaries saved to current directory" $GREEN
  else
    show "All binaries saved to $output" $GREEN
  fi
}

# Make directory for go sources and set GOPATH environment variable
#
# Code: No
# Echo: No
setupGoEnv() {
  local target_dir="$1"

  mkdir "$target_dir/src"
  mkdir "$target_dir/pkg"
  mkdir "$target_dir/bin"

  export GOPATH="$target_dir"

  export GO111MODULE="auto"
}

# Find sources for binary files
#
# 1: Path to directory with sources (String)
#
# Code: No
# Echo: No
findBinaries() {
  local main_pkg

  main_pkg=$(head -1 "$1/src/REVISIONS" | cut -f2 -d" ")

  grep --include='*.go' -rn '^package main$' "$1/src/$main_pkg" 2>/dev/null | cut -f1 -d':'
}

unpackSources() {
  local src_name="$1"
  local has_errors arch_ext

  arch_ext=$(getArchExt "$src_name")

  showm "Unpacking sources… "

  pushd "$tmp_dir" &> /dev/null || cleanAndExit 1

  if [[ "$arch_ext" == "tar.gz" || "$arch_ext" == "tgz" ]] ; then
    if ! tar xzf "$src_name" ; then
      show "ERROR\n" $RED
      error "Can't unpack Gzip archive"
      has_errors=true
    fi
  elif [[ "$arch_ext" == "tar.bz2" || "$arch_ext" == "tbz2" || "$arch_ext" == "tar.bz" || "$arch_ext" == "tbz" ]] ; then
    if ! tar xjf "$src_name" ; then
      show "ERROR\n" $RED
      error "Can't unpack Bzip2 archive"
      has_errors=true
    fi
  elif [[ "$arch_ext" == "tar.xz" || "$arch_ext" == "txz" ]] ; then
    if ! tar xJf "$src_name" ; then
      show "ERROR\n" $RED
      error "Can't unpack XZ archive"
      has_errors=true
    fi
  else
    show "ERROR\n" $RED
    error "Unknown archive type"
    has_errors=true
  fi

  if [[ -z "$has_errors" && $? -ne 0 ]] ; then
    has_errors=true
  fi

  popd &> /dev/null || cleanAndExit 1

  if [[ -n "$has_errors" ]] ; then
    cleanAndExit 1
  fi

  show "DONE" $GREEN
}

# Get archive name (without extension)
#
# 1: Archive name (String)
#
# Code: No
# Echo: Archive name without extension (String)
getArchName() {
  local file_name arch_type

  file_name=$(basename "$1")

  for arch_type in $SUPPORTED_ARCH_TYPES ; do
    file_name="${file_name/.${arch_type}/}"
  done

  echo "$file_name"
}

# Get archive extension
#
# 1: Archive name (String)
#
# Code: No
# Echo: Archive extension (String)
getArchExt() {
  local file_name arch_type

  file_name=$(basename "$1")

  for arch_type in $SUPPORTED_ARCH_TYPES ; do
    if [[ $file_name =~ $arch_type ]] ; then
      echo "$arch_type"
      return 0
    fi
  done

  echo ""
  return 1
}

# Create temporary directory
#
# Code: No
# Echo: No
makeTempDir() {
  tmp_dir=$(mktemp -d "${tmp:?}/$TMP_TEMPLATE")

  if [[ ! -d "$tmp_dir" ]] ; then
    error "Can't create temporary directory"
    exit 1
  fi
}

# Check required dependencies
#
# *: Required apps
#
# Code: No
# Echo: No
isAppInstalled() {
  for app in "$@" ; do
    type -P "$app" &> /dev/null
    [[ $? -eq 1 ]] && return 1
  done

  return 0
}

# Check response status code for URL
#
# 1: URL (String)
#
# Code: Yes
# Echo: No
isAccessibleURL() {
  local status code size

  if [[ "$1" =~ http:|https: ]] ; then
    code=$(curl -LIs --max-redirs 10 -X GET -w '%{http_code}' -o /dev/null "$1")
    [[ "$code" == "200" ]] && return 0 || return 1
  elif [[ "$1" =~ ftp: ]] ; then
    status=$(curl "$1" -Is)
    size=$(echo "$status" | grep "Content-Length" | cut -f2 -d" ")
    [[ -n "$size" && "$size" != "0" ]] && return 0 || return 1
  else
    return 1
  fi
}


# Check if given value is URL
#
# 1: URL (String)
#
# Code: Yes
# Echo: No
isURL() {
  if [[ "${1:0:5}" == "https" || "${1:0:4}" == "http" ]] ; then
    return 0
  fi

  return 1
}

# Clean temporary data and exit with given exit code
#
# 1: Path to temporary dir (String)
# 2: Exit code (Number) [Optional]
#
# Code: No
# Echo: No
cleanAndExit() {
  local code="${1:-0}"

  if [[ -e "$tmp_dir" ]] ; then
    rm -rf "$tmp_dir"
  fi

  exit "$code"
}

# INT/QUIT/TERM signal handler
#
# Code: No
# Echo: No
termExit() {
  cleanAndExit 1
}

################################################################################

# Print message to console
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print message without new line symbol to console
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Show formatted message with option info
#
# 1: Option (String)
# 2: Description (String)
# 3: Arguments (String) [Optional]
#
# Code: No
# Echo: No
showo() {
  local optn optd optp optt optf breadcrumbs

  optn="$1"
  optd="$2"
  optp="$3"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$optp" ]] ; then
    optt="$optn"
    optf=$(( 20 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  else
    optt="$optn $optp"
    optf=$(( 20 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "▲ $*" $RED 1>&2
}

# Show usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} gopack-build ${CL_GREEN}{options}${CL_NORM} file"
  show ""
  show "Options" $BOLD
  show ""
  showo "--output, -o"    "Output directory" "dir"
  showo "--tmp, -T"       "Path to temporary directory ${CL_DARK}(/tmp by default)${CL_NORM}" "dir"
  showo "--no-color, -nc" "Disable colors in output" ""
  showo "--version, -v"   "Show information about version" ""
  showo "--help, -h"      "Show this help message" ""
  show ""
  show "Examples" $BOLD
  show ""
  show "  gopack yo-0.2.0.tar.bz2"
  show "  Build binary from local archive with sources" $DARK
  show ""
  show "  gopack -o /home/user https://github.com/essentialkaos/yo/releases/download/v0.2.0/yo-0.2.0.tar.bz2"
  show "  Build binary from remote archive with sources and save result" $DARK
  show "  to directory /home/user" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Prints message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift

done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
