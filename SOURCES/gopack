#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2128,SC2154,SC2178

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

APP="GoPack"
VER="1.10.4"
DESC="Simple tool for packing golang packages sources with all dependencies"

################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

################################################################################

SEPARATOR="--------------------------------------------------------------------------------"

TMP_TEMPLATE="gopack-XXXXXXXX"

SUPPORTED_ARCH_TYPES="tbz2 tar.bz2 tgz tar.gz tbz tar.bz tar.xz txz"

SUPPORTED_OPTS="tmp output version revision tag branch !preserve_vendor 
 !no_colors !verbose !help !usage"
SHORT_OPTS="T:tmp o:output v:version r:revision t:tag b:branch pv:!preserve_vendor 
 nc:!no_colors V:!verbose h:!help"

# Path to temporary dir (String)
tmp="/tmp"

EC_OK=0
EC_ERROR=1

# -
# Temporary directory for sources
tmp_dir=""

# -
# Glide usage flag
useGlide=""

# -
# Dep usage flag
useDep=""

# -
# Go modules usage flag
useMod=""

################################################################################

# Main function
#
# *: All unparsed argumens
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY
  fi

  if [[ -n "$help" || -n "$usage" || $# -eq 0 ]] ; then
    usage
    exit $EC_OK
  fi

  prepare
  process "$1"
}

# Check properties and arguments
#
# Code: No
# Echo: No
prepare() {
  if [[ -z "$tmp" ]] ; then
    error "Path to temporary directory can't be empty"
    exit $EC_ERROR
  fi

  if [[ ! -d "$tmp" ]] ; then
    error "Temporary directory ${CL_BL_RED}${tmp}${CL_RED} doesn't exist"
    exit $EC_ERROR
  fi

  if [[ ! -w "$tmp" || ! -r "$tmp" || ! -x "$tmp" ]] ; then
    error "Temporary directory ${CL_BL_RED}${tmp}${CL_RED} must be readable, writable and executable"
    exit $EC_ERROR
  fi

  if ! isAppInstalled "go" ; then
    error "This utility require go. Install it first."
    exit $EC_ERROR
  fi

  if ! isAppInstalled "curl" ; then
    error "This utility require curl. Install it first."
    exit $EC_ERROR
  fi

  if [[ -n "$output" && -z $(getArchExt "$output") ]] ; then
    error "Unsupported output format"
    exit $EC_ERROR
  fi
}

# Download and pack sources
#
# 1: Path (String)
#
# Code: No
# Echo: No
process() {
  local package arch_name output_file output_size pretty_output

  package="$1"

  makeTempDir

  # Allow redirects for stable import services
  git config --global http.https://pkg.re.followRedirects true &> /dev/null
  git config --global http.https://gopkg.in.followRedirects true &> /dev/null

  trap termExit SIGINT SIGQUIT SIGTERM

  showm "Setting temporary Go environment variables… " $BOLD

  setupGoEnv "$tmp_dir"

  show "DONE" $GREEN

  if ! checkoutCode "$package" ; then
    cleanAndExit $EC_ERROR
  fi

  findUsedDepsManager "$package"

  if [[ -n "$preserve_vendor" ]] ; then
    saveVendorData "$package"
  fi

  if [[ -n "$useGlide" ]] ; then
    if ! installGlide ; then
      cleanAndExit $EC_ERROR
    fi

    if ! getDepsByGlide "$package" ; then
      cleanAndExit $EC_ERROR
    fi
  elif [[ -n "$useDep" ]] ; then
    if ! installDep ; then
      cleanAndExit $EC_ERROR
    fi

    if ! getDepsByDep "$package" ; then
      cleanAndExit $EC_ERROR
    fi
  elif [[ -n "$useMod" ]] ; then
    if ! getDepsByMod "$package" ; then
      cleanAndExit $EC_ERROR
    fi
  else
    if ! downloadDeps "$package" ; then
      cleanAndExit $EC_ERROR
    fi
  fi

  if [[ -n "$preserve_vendor" ]] ; then
    restoreVendorData "$package"
  fi

  if [[ -z "$output" ]] ; then
    output=$(getOutputName "$package")
  fi

  arch_name=$(getArchName "$output")
  output_file=$(basename "$output")

  cleanPackDir "$GOPATH/src"

  mv "$GOPATH/src" "$tmp_dir/$arch_name"
  mv "$GOPATH/REVISIONS" "$tmp_dir/$arch_name/"

  if ! packSources "$output" ; then
    cleanAndExit $EC_ERROR
  fi

  cp "$GOPATH/$output_file" "$output"

  [[ -z "$verbose" ]] && show ""

  # shellcheck disable=SC2012
  output_size=$(ls -lah "$output" | awk -F " " '{print $5}')

  # shellcheck disable=SC2001
  pretty_output=$(echo "$output" | sed 's:^\.\/::')

  show "${CL_GREEN}Sources packed and saved as ${CL_BL_GREEN}${pretty_output}${CL_DARK} (${output_size})${CL_NORM}"

  cleanAndExit
}

# Create temporary directory
#
# Code: No
# Echo: No
makeTempDir() {
  tmp_dir=$(mktemp -d "${tmp:?}/$TMP_TEMPLATE")

  if [[ ! -d "$tmp_dir" ]] ; then
    error "Can't create temporary directory"
    exit $EC_ERROR
  fi
}

# Make directory for go sources and set GOPATH environment variable
#
# Code: No
# Echo: No
setupGoEnv() {
  local target_dir="$1"

  mkdir "$target_dir/src"
  mkdir "$target_dir/pkg"
  mkdir "$target_dir/bin"

  export GOPATH="$target_dir"
  export GOBIN="$target_dir/bin"
  export PATH="$target_dir/bin:$PATH"

  export GO111MODULE="auto"
}

# Checkout source code
#
# 1: Path to temporary dir (String)
# 2: Path to source code (String)
#
# Code: No
# Echo: No
checkoutCode() {
  local package git_path package_name

  package="$1"
  git_path="https://$package.git"
  package_name=$(basename "$package")

  showm "Downloading sources… " $BOLD

  if ! isHTTPStatusOk "$git_path" ; then
    show "ERROR" $RED
    error "Repository ${CL_BL_RED}${git_path}${CL_RED} is not accessible"
    return 1
  fi

  mkdir -p "$GOPATH/src/$package"

  if [[ -n "$branch" ]] ; then
    if ! execCmd "git" "clone" "--depth=1" "--branch=$branch" "$git_path" "$GOPATH/src/$package/" ; then
      error "Error while cloning repository ${CL_BL_RED}${git_path} (branch: $branch)"
      return 1
    fi
  elif [[ -n "$tag" ]] ; then
    if ! execCmd "git" "clone" "--depth=1" "--branch=$tag" "$git_path" "$GOPATH/src/$package/" ; then
      error "Error while cloning repository ${CL_BL_RED}${git_path} (tag: $tag)"
      return 1
    fi
  elif [[ -n "$revision" ]]; then
    if ! execCmd "git" "clone" "$git_path" "$GOPATH/src/$package/" ; then
      error "Error while cloning repository ${CL_BL_RED}${git_path} (rev: $revision)"
      return 1
    fi
  else
    if ! execCmd "git" "clone" "--depth=1" "$git_path" "$GOPATH/src/$package/" ; then
      error "Error while cloning repository ${CL_BL_RED}${git_path}"
      return 1
    fi
  fi

  pushd "$GOPATH/src/$package" &> /dev/null || printCDErrorAndExit

    if [[ -n "$revision" ]] ; then
      showm "Switching HEAD to revision $revision… " $BOLD

      if ! execCmd "git" "checkout" "$revision" ; then
        error "Can't fetch revision ${CL_BL_RED}${revision}"
        return 1
      fi
    fi

  popd &> /dev/null || printCDErrorAndExit

  return 0
}

# Backup vendor data
#
# 1: Package name (String)
#
# Code: No
# Echo: No
saveVendorData() {
  local package="$1"

  if [[ ! -e "$GOPATH/src/$package/vendor" ]] ; then
    return
  fi

  cp -rlp "$GOPATH/src/$package/vendor" "$GOPATH/vendor_backup"
  rm -rf "$GOPATH/src/$package/vendor/" &> /dev/null
}

# Restore vendor data
#
# 1: Package name (String)
#
# Code: No
# Echo: No
restoreVendorData() {
  local package="$1"

  if [[ ! -e "$GOPATH/vendor_backup" ]] ; then
    return
  fi

  if [[ ! -e "$GOPATH/src/$package/vendor" ]] ; then
    mkdir "$GOPATH/src/$package/vendor"
  fi

  # shellcheck disable=SC2216
  yes | cp -rf "$GOPATH/vendor_backup"/* "$GOPATH/src/$package/vendor/" &> /dev/null

  rm -rf "$GOPATH/vendor_backup" &> /dev/null
}

# Download dependencies for given package
#
# 1: Package name (String)
# 2: Path to temporary directory with sources (String)
#
# Code: Yes
# Echo: No
downloadDeps() {
  local package="$1"

  showm "Downloading dependencies… " $BOLD

  pushd "$GOPATH/src/$package" &> /dev/null || printCDErrorAndExit

    if ! execCmd "go" "get" "-d" "-v" "./..." ; then
      error "Can't download package dependencies"
      return 1
    fi

  popd &> /dev/null || printCDErrorAndExit

  saveLatestCommitsHash "$GOPATH/src" "$GOPATH/REVISIONS"

  return 0
}

# Try to find used dependency management tool
#
# 1: Package name (String)
# 2: Path to temporary directory with sources (String)
#
# Code: No
# Echo: No
findUsedDepsManager() {
  local package="$1"

  if [[ -e "$GOPATH/src/$package/Gopkg.lock" ]] ; then
    useDep=true
  elif [[ -e "$GOPATH/src/$package/glide.lock" ]] ; then
    useGlide=true
  elif [[ -e "$GOPATH/src/$package/go.sum" ]]; then
    useMod=true
  fi
}

# Install latest version of glide
#
# Code: Yes
# Echo: No
installGlide() {
  if isAppInstalled "glide" ; then
    return 0
  fi

  showm "Installing latest version of glide… " $BOLD

  mv "$GOPATH/src" "$GOPATH/src_backup"
  mkdir "$GOPATH/src"

  if ! execCmd "go" "get" "-v" "github.com/Masterminds/glide" ; then
    error "Can't install glide"
    return 1
  fi

  rm -rf "$GOPATH/src"
  mv "$GOPATH/src_backup" "$GOPATH/src"

  return 0
}

# Download dependencies for given package using glide
#
# 1: Package name (String)
# 2: Path to temporary directory with sources (String)
#
# Code: Yes
# Echo: No
getDepsByGlide() {
  local package="$1"

  showm "Downloading dependencies with glide… " $BOLD

  pushd "$GOPATH/src/$package" &> /dev/null || printCDErrorAndExit

    if ! execCmd "glide" "install" ; then
      error "Can't download package dependencies"
      return 1
    fi

  popd &> /dev/null || printCDErrorAndExit

  saveLatestCommitsHash "$GOPATH/src" "$GOPATH/REVISIONS"

  return 0
}

# Install latest version of dep
#
# Code: Yes
# Echo: No
installDep() {
  if isAppInstalled "dep" ; then
    return 0
  fi

  showm "Installing latest version of dep… " $BOLD

  mv "$GOPATH/src" "$GOPATH/src_backup"
  mkdir "$GOPATH/src"

  if ! execCmd "go" "get" "-v" "github.com/golang/dep/..." ; then
    error "Can't install dep"
    return 1
  fi

  rm -rf "$GOPATH/src"
  mv "$GOPATH/src_backup" "$GOPATH/src"

  return 0
}

# Download dependencies for given package using glide
#
# 1: Package name (String)
# 2: Path to temporary directory with sources (String)
#
# Code: Yes
# Echo: No
getDepsByDep() {
  local package="$1"

  showm "Downloading dependencies with dep… " $BOLD

  pushd "$GOPATH/src/$package" &> /dev/null || printCDErrorAndExit

    if ! execCmd "dep" "ensure" "-v" ; then
      error "Can't download package dependencies"
      return 1
    fi

  popd &> /dev/null || printCDErrorAndExit

  saveLatestCommitsHash "$GOPATH/src" "$GOPATH/REVISIONS"

  return 0
}

# Download dependencies for given package using glide
#
# 1: Package name (String)
# 2: Path to temporary directory with sources (String)
#
# Code: Yes
# Echo: No
getDepsByMod() {
  local package="$1"

  showm "Downloading dependencies with go mod… " $BOLD

  export GO111MODULE=on

  pushd "$GOPATH/src/$package" &> /dev/null || printCDErrorAndExit

    if ! execCmd "go" "mod" "download" ; then
      error "Can't download package dependencies"
      return 1
    fi

  popd &> /dev/null || printCDErrorAndExit

  saveLatestCommitsHash "$GOPATH/src" "$GOPATH/REVISIONS"

  return 0
}

# Save latest commit hash to file (currently supported only git)
#
# 1: Path to dir with sources (String)
# 2: Output file (String)
#
# Code: No
# Echo: No
saveLatestCommitsHash() {
  local dir="$1"
  local output="$2"

  local git_dir repo_dir head_hash

  pushd "$dir" &> /dev/null || printCDErrorAndExit

    while IFS= read -r -d '' git_dir ; do

      pushd "$git_dir" &> /dev/null || printCDErrorAndExit

        pushd .. &> /dev/null || printCDErrorAndExit

          repo_dir=$(dirname "${git_dir:2:9999}")
          head_hash=$(git rev-parse HEAD)

        popd &> /dev/null || printCDErrorAndExit

        echo "$head_hash $repo_dir" >> "$output"

      popd &> /dev/null || printCDErrorAndExit

    done < <(find . -name ".git" -type d -print0)

  popd &> /dev/null || printCDErrorAndExit
}

# Remove repo data and CI services configs
#
# 1: Path to directory with sources (String)
#
# Code: No
# Echo: No
cleanPackDir() {
  local dir="$1"

  # Remove CSV data
  find "$dir" -type d -name ".git" -exec rm -rf {} \; &>/dev/null
  find "$dir" -type f -name ".gitignore" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".gitattributes" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".gitmodules" -exec rm -f {} \; &>/dev/null

  # Remove CI service configuration files
  find "$dir" -type f -name ".travis.yml" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".drone.sec" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".drone.yml" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".hound.yml" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".vexor.yml" -exec rm -f {} \; &>/dev/null
  find "$dir" -type f -name ".codebeatsettings" -exec rm -f {} \; &>/dev/null

  # Remove test data
  find "$dir" -type d -name "testdata" -exec rm -rf {} \; &>/dev/null

  # Remove empty directories
  find "$dir" -type d -empty -delete &>/dev/null
}

# Pack source into archive
#
# 1: Output file (String)
# 2: Temprary dir (String)
#
# Code: Yes
# Echo: No
packSources() {
  local output="$1"

  local arch_name arch_ext

  arch_name=$(getArchName "$output")
  arch_ext=$(getArchExt "$output")

  showm "Packing sources… " $BOLD

  pushd "$GOPATH" &> /dev/null || printCDErrorAndExit

    if [[ "$arch_ext" == "tar.gz" || "$arch_ext" == "tgz" ]] ; then
      if ! execCmd "tar" "czfv" "${arch_name}.${arch_ext}" "$arch_name" ; then
        error "Can't pack sources"
        return 1
      fi
    elif [[ "$arch_ext" == "tar.bz2" || "$arch_ext" == "tbz2" || "$arch_ext" == "tar.bz" || "$arch_ext" == "tbz" ]] ; then
      if ! execCmd "tar" "cjfv" "${arch_name}.${arch_ext}" "$arch_name" ; then
        error "Can't pack sources"
        return 1
      fi
    elif [[ "$arch_ext" == "tar.xz" || "$arch_ext" == "txz" ]] ; then
      if ! execCmd "tar" "cfJ" "${arch_name}.${arch_ext}" "$arch_name" ; then
        error "Can't pack sources"
        return 1
      fi
    else
      show "ERROR\n" $RED
      error "Unknown archive type"
      return 1
    fi

  popd &> /dev/null || printCDErrorAndExit

  return 0
}

# Generate output file name
#
# 1: Path (String)
#
# Code: No
# Echo: File name (String)
getOutputName() {
  local path="$1"

  local base

  if [[ -z "$version" && -n "$tag" ]] ; then
    version="${tag#v}"
  fi

  if [[ -z "$version" ]] ; then
    pushd "$GOPATH/src/$package" &>/dev/null || printCDErrorAndExit

      local git_rev git_ver

      git_rev=$(git rev-list --tags --max-count=1 2>/dev/null)

      if [[ -n "$git_rev" ]] ; then
        git_ver=$(git describe --tags "$git_rev" 2>/dev/null| sed 's/^v//')

        if [[ -n "$git_ver" ]] ; then
          version="$git_ver"
        fi
      fi

    popd &>/dev/null || printCDErrorAndExit
  fi

  base=$(basename "$path" | cut -f1 -d'.')

  if [[ -n "$version" ]] ; then
    echo "$base-$version.tar.bz2"
  else
    echo "$base.tar.bz2"
  fi
}

# Get archive name (without extension)
#
# 1: Archive name (String)
#
# Code: No
# Echo: Archive name without extension (String)
getArchName() {
  local file_name arch_type

  file_name=$(basename "$1")

  for arch_type in $SUPPORTED_ARCH_TYPES ; do
    file_name="${file_name/.${arch_type}/}"
  done

  echo "$file_name"
}

# Get archive extension
#
# 1: Archive name (String)
#
# Code: No
# Echo: Archive extension (String)
getArchExt() {
  local file_name arch_type

  file_name=$(basename "$1")

  for arch_type in $SUPPORTED_ARCH_TYPES ; do
    if [[ $file_name =~ $arch_type ]] ; then
      echo "$arch_type"
      return 0
    fi
  done

  echo ""
  return 1
}

# Execute some command
#
# *: Command and all arguments
#
# Code: Yes
# Echo: No
execCmd() {
  local status start_time end_time grc_time

  if [[ -n "$verbose" ]] ; then
    show "\n\n$SEPARATOR\n" $GREY
    # shellcheck disable=SC2068
    $@
    status=$?
    show "\n$SEPARATOR\n" $GREY
  else
    start_time=$(now)
    # shellcheck disable=SC2068
    $@ &> /dev/null
    status=$?

    end_time=$(now)

    if [[ $status -ne 0 ]] ; then
      show "ERROR" $RED
    else
      grc_time=$(getGraceTime "$start_time" "$end_time")
      show "${CL_GREEN}DONE${CL_NORM} ${CL_DARK}($grc_time)${CL_NORM}"
    fi
  fi

  return $status
}

# Check required dependencies
#
# *: Required apps
#
# Code: No
# Echo: No
isAppInstalled() {
  for app in "$@" ; do
    type -P "$app" &> /dev/null
    [[ $? -eq 1 ]] && return 1
  done

  return 0
}

# Check response status code for repo url
#
# 1: URL (String)
#
# Code: Yes
# Echo: No
isHTTPStatusOk() {
  local url code

  url="$1"
  code=$(curl -ILs -o /dev/null "$url" -w '%{http_code}')

  if [[ $code -ne 200 ]] ; then
    return 1
  fi

  return 0
}

# Get action time in grace format (3 min 32 sec)
#
# 1: Start timestamp (Number)
# 2: End timestamp (Number)
#
# Code: No
# Echo: No
getGraceTime() {
  local start end tim sec min

  start="$1"
  end="$2"
  tim=$((end - start))

  [[ -z "$tim" || "$tim" == "0" ]] && echo "< 1 sec" && return 0

  sec=$((tim % 60))
  min=$(((tim - sec)/60))

  if [[ $min -eq 0 ]] ; then
    echo "$sec sec"
  else
    echo "$min min $sec sec"
  fi
}

# Get current date and time as unix timestamp
#
# Code: No
# Echo: Timestamp (Number)
now() {
  date +%s
}

# Print error and exit
#
# Code: No
# Echo: No
printCDErrorAndExit() {
  error "Can't set working directory"
  cleanAndExit $EC_ERROR
}

# Clean temporary data and exit with given exit code
#
# 1: Path to temporary dir (String)
# 2: Exit code (Number) [Optional]
#
# Code: No
# Echo: No
cleanAndExit() {
  local code="${1:-$EC_OK}"

  if [[ -n "$useMod" ]] ; then
    if ! GO111MODULE=on go clean -modcache ; then
      error "Can't clean modules data"
    fi
  fi

  if [[ -e "$tmp_dir" ]] ; then
    if ! rm -rf "$tmp_dir" &> /dev/null ; then
      error "Can't clean and remove temp directory $tmp_dir"
    fi
  fi

  exit "$code"
}

# INT/QUIT/TERM signal handler
#
# Code: No
# Echo: No
termExit() {
  cleanAndExit $EC_ERROR
}

################################################################################

# Print message to console
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print message without new line symbol to console
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Show formated message with option info
#
# 1: Option (String)
# 2: Description (String)
# 3: Arguments (String) [Optional]
#
# Code: No
# Echo: No
showo() {
  local optn optd optp optt optf breadcrumbs

  optn="$1"
  optd="$2"
  optp="$3"

  if [[ -n "$DARK" ]] ; then
    breadcrumbs="............................"
  else
    breadcrumbs="                            "
  fi

  if [[ -z "$optp" ]] ; then
    optt="$optn"
    optf=$(( 26 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  else
    optt="$optn $optp"
    optf=$(( 26 - ${#optt} ))
    echo -e "  ${CL_GREEN}${optn}${CL_NORM} ${CL_GREY}${optp}${CL_NORM} ${CL_DARK}${breadcrumbs:0:$optf}${CL_NORM} $optd"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" $RED 1>&2
}

# Show usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} gopack ${CL_GREEN}{options}${CL_NORM} package-path"
  show ""
  show "Options" $BOLD
  show ""
  showo "--output, -o"           "Output file name" "filename"
  showo "--version, -v"          "Package version" "version"
  showo "--revision, -r"         "Target revision" "revision"
  showo "--branch, -b"           "Target branch" "branch"
  showo "--tag, -t"              "Target tag" "tag"
  showo "--preserve-vendor, -pv" "Preserve old vendor data ${CL_DARK}(unsafe, use with caution)${CL_NORM}"
  showo "--tmp, -T"              "Path to temporary directory ${CL_DARK}(/tmp by default)${CL_NORM}" "path"
  showo "--verbose, -V"          "Verbose output"
  showo "--no-color, -nc"        "Disable colors in output"
  showo "--help, -h"             "Show this help message"
  show ""
  show "Examples" $BOLD
  show ""
  show "  gopack -v 1.0.1 github.com/essentialkaos/ssllabs_client"
  show "  Pack sources for version 1.0.1 and save result as ssllabs_client-1.0.1.tar.bz2" $DARK
  show ""
  show "  gopack -o ssllabs-client-1.0.1.tar.bz2 github.com/essentialkaos/ssllabs_client"
  show "  Pack sources for version 1.0.1 and save result as ssllabs-client-1.0.1.tar.bz2" $DARK
  show ""
  show "  gopack -o ssllabs-client-1.0.1.tgz -t v1.0.1 github.com/essentialkaos/ssllabs_client"
  show "  Fetch sources with tag v1.0.1, pack sources for version 1.0.1 and save result " $DARK
  show "  as ssllabs-client-1.0.1.tgz" $DARK
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Prints message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1"
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
  exit $?
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift

done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
